@startuml

abstract class AbstractList
abstract AbstractCollection
interface List
interface Collection

List <|-- AbstractList
Collection <|-- AbstractCollection

Collection <|- List
AbstractCollection <|- AbstractList
AbstractList <|-- ArrayList

class ArrayList {
Object[] elementData
size()
}

enum TimeUnit {
DAYS
HOURS
MINUTES
}

@enduml

@startuml
CollatedTrajectoryBuilder <-down- map_build
Collator <-down- CollatedTrajectoryBuilder
CollatedTrajectoryBuilder -right-> GlobalTrajectoryBuilder
OrderedMultiQueue <-down- Collator
Queue <-down- OrderedMultiQueue
Data <-down- Queue
class CollatedTrajectoryBuilder
note left: callback HandleCollatedSensorData
class map_build {
+ AddTrajectoryBuilder()
===
- MapBuilderOptions
- thread_pool_
- pose_graph_
- CollatorInterface sensor_collator_
- TrajectoryBuilderInterface trajectory_builders_
- all_trajectory_builder_options_
}

class CollatedTrajectoryBuilder {

+ AddSensorData()
+ HandleCollatedSensorData()
==
- AddData()

- CollatorInterface* sensor_collator_
}

class Collator {

-OrderedMultiQueue queue_
}
class OrderedMultiQueue {

+ Add()
+ Dispatch()

==
std::map<QueueKey, Queue> queues_;
}
class Queue {
Data queue
+Callback callback
bool finished
}
class Data{
+ AddToTrajectoryBuilder()
}
class GlobalTrajectoryBuilder{
+ AddSensorData(point_cloud)
===
  trajectory_id_;
  pose_graph_;
  -local_trajectory_builder_;
  local_slam_result_callback_;
}
note top: AddToTrajectoryBuilder时创建,\ncallback HandleCollatedSensorData,\n在Cartographer_ros定义,push到trajectory_state_data_

LocalTrajectoryBuilder <-down- GlobalTrajectoryBuilder

pose_graph_ <-down- GlobalTrajectoryBuilder

local_slam_result_callback_ <-down- GlobalTrajectoryBuilder

class LocalTrajectoryBuilder {
+ AddRangeData()
+ AddOdometryData();
===
  - AddAccumulatedRangeData()
  - TransformToGravityAlignedFrameAndFilter()
  - InsertIntoSubmap()
  - ScanMatch()
----
  -active_submaps_
  -motion_filter_
  -extrapolator_
  -num_accumulated_
  -accumulated_range_data_
  -accumulation_started_
  -range_data_collator_
---
  -real_time_correlative_scan_matcher_
  -ceres_scan_matcher_
}
real_time_correlative_scan_matcher_ <-down- LocalTrajectoryBuilder
ceres_scan_matcher_ <-down- LocalTrajectoryBuilder
class real_time_correlative_scan_matcher_{

}
class ceres_scan_matcher_{

}
class pose_graph_ {
+ AddNode()
===
- ComputeConstraintsForNode()//为节点添加约束，并在后台启动扫描匹配。//节点在所有子地图的位姿
- AddWorkItem()
- WhenDone()在'MaybeAdd * Constraint'触发的所有计算完成后，\n注册要与结果一起"result"的'callback'。 'callback'在'ThreadPool'中执行。
- NotifyEndOfNode();//与节点相关的计算全部完成后必须调用
---
- finish_node_task_
- when_done_task_
- constraints_ // \n 1.节点在激活子地图位姿 \n 2.节点在完成子地图可能有的约束（假如匹配到了）\n 3. 如果是新地图, 为旧的节点计算约束
- constraint_builder_
}
note right: 连接本地SLAM堆栈（即姿势外推器，扫描匹配等），无需闭环。
class ConstraintBuilder2D{

- MaybeAddConstraint() //调度探索submap和'node_id'的\n'compressed_point_cloud'之间的新约束。
- computeConstraint()

==
submap_scan_matcher_
ceres_scan_matcher_
}

class submap_scan_matcher_{
- fast_correlative_scan_matcher()
}
class ceres_scan_matcher_{
- Match()
}
ConstraintBuilder2D <-down- pose_graph_
submap_scan_matcher_ <-down- ConstraintBuilder2D
ceres_scan_matcher_ <-down- ConstraintBuilder2D
@enduml

